name: continuous-integration


on:
  push:
    branches: [master]
  pull_request:
    branches: [master]


jobs:

  lint:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}

    - name: Set up Node/yarn
      uses: actions/setup-node@v1
      with:
        node-version: '10.x'

    - name: Install python setup dependencies
      run: |
        pip install --user --upgrade pip setuptools wheel

    - name: Get pip cache dir
      id: pip-cache
      run: |
        echo "::set-output name=dir::$(pip cache dir)"

    - name: Cache pip
      uses: actions/cache@v1
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: ${{ runner.os }}-pip-lint-${{ matrix.python-version }}-${{ hashFiles('setup.py') }}
        restore-keys: |
          ${{ runner.os }}-pip-lint-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-lint-

    - name: Install linting dependencies
      run: |
        pip install . pre-commit

    - name: Check pip environment
      run: |
        pip freeze
        pip check

    - name: Cache yarn
      uses: actions/cache@v1
      with:
        path: .yarn-packages
        key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-

    - name: Install yarn dependencies
      run: |
        yarn --prefer-offline --no-optional

    - name: Lint
      run: |
        pre-commit run --all-files

  # Build docs on a number of Python versions. In the future this can be
  # where tests go.
  tests:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8, 3.9]

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install python setup dependencies
      run: |
        pip install --user --upgrade pip setuptools wheel

    - name: Get pip cache dir
      id: pip-cache
      run: |
        echo "::set-output name=dir::$(pip cache dir)"

    - name: Cache pip
      uses: actions/cache@v1
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: ${{ runner.os }}-pip-test-${{ matrix.python-version }}-${{ hashFiles('setup.py', 'docs/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-test-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-test-

    - name: Install python test dependencies
      run: |
        pip install . -r docs/requirements.txt

    - name: Check pip environment
      run: |
        pip freeze
        pip check

    - name: Build docs to store
      run: |
        export PATH="$HOME/miniconda/bin:$PATH"
        sphinx-build -b html docs/ docs/_build/html -W --keep-going

    - name: Run the tests
      run: |
        pytest


  audit:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
    env:
      PORT: 8080
      # the host interface to listen on, might need to be 0.0.0.0
      HOST: 127.0.0.1
      # the base url
      URL: http://127.0.0.1:8080

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install python setup dependencies
      run: |
        pip install --user --upgrade pip setuptools wheel

    - name: Get pip cache dir
      id: pip-cache
      run: |
        echo "::set-output name=dir::$(pip cache dir)"

    - name: Cache pip
      uses: actions/cache@v1
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: ${{ runner.os }}-pip-test-${{ matrix.python-version }}-${{ hashFiles('setup.py', 'docs/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-test-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-test-

    - name: Install python test dependencies
      run: |
        pip install -vv . -r docs/requirements.txt

    - name: Check pip environment
      run: |
        pip freeze
        pip check

    - name: Build docs to store
      run: |
        export PATH="$HOME/miniconda/bin:$PATH"
        sphinx-build -b html docs/ docs/_build/html -W --keep-going

    - name: Serve the built site
      run: |
        nohup python docs/serve.py --port=${PORT} --host=${HOST} &
        curl --retry 10 --retry-connrefused --retry-max-time 60 ${URL}/index.html

    # TODO: use the hosted API with a secret? would allow for comparison over time...
    - name: Make folder for Lighthouse reports
      run: mkdir -p /tmp/lighthouse/lighthouse-${{ github.run_number }}
    - name: Run Lighthouse on Site
      id: lighthouse
      uses: foo-software/lighthouse-check-action@v2.0.0
      with:
        # TODO: generate this list to audit all html pages
        urls: >-
          ${{ env.URL }}/index.html,
          ${{ env.URL }}/demo/api.html,
          ${{ env.URL }}/demo/demo.html,
          ${{ env.URL }}/demo/example_pandas.html
        outputDirectory: /tmp/lighthouse/lighthouse-${{ github.run_number }}
        verbose: true

    - name: Cache yarn
      uses: actions/cache@v1
      with:
        path: .yarn-packages
        key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-

    - name: Install yarn dependencies
      run: |
        yarn --prefer-offline --no-optional

    - name: Run the accessibility audit
      run: |
        python docs/a11y.py --no-serve

    - name: Assess Lighthouse Check results
      uses: foo-software/lighthouse-check-status-action@v1.0.1
      with:
        lighthouseCheckResults: ${{ steps.lighthouse.outputs.lighthouseCheckResults }}
        minAccessibilityScore: "96"
        minBestPracticesScore: "85"
        minPerformanceScore: "10"
        minSeoScore: "80"
      if: always()

    - name: Publish Lighthouse reports
      uses: actions/upload-artifact@v2
      with:
        name: Lighthouse ${{ github.run_number }}
        path: /tmp/lighthouse
      if: always()

    - name: Publish Pa11y reports
      uses: actions/upload-artifact@v2
      with:
        name: Pa11y ${{ github.run_number }}
        path: docs/_build/pa11y
      if: always()

  publish:

    name: Publish to PyPi
    needs: [lint, tests]
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v2
      - name: Set up Python 3.7
        uses: actions/setup-python@v1
        with:
          python-version: 3.7
      - name: Build package
        run: |
          pip install wheel
          python setup.py sdist bdist_wheel
      - name: Publish
        uses: pypa/gh-action-pypi-publish@v1.1.0
        with:
          user: __token__
          password: ${{ secrets.PYPI_KEY }}
