const { resolve } = require('path');
const webpack = require('webpack');
const { CleanWebpackPlugin } = require('clean-webpack-plugin');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const CopyPlugin = require('copy-webpack-plugin');

const pythonPath = resolve(__dirname, 'pydata_sphinx_theme');
const staticPath = resolve(pythonPath, 'static');

const vendor = resolve(staticPath, 'vendor');
const vendorVersions = {
  fontAwesome: require("@fortawesome/fontawesome-free/package.json").version,
  openSans: require("@openfonts/open-sans_all/package.json").version,
  lato: require("@openfonts/lato_latin-ext/package.json").version
};
const vendorPaths = {
  fontAwesome: resolve(vendor, 'fontawesome', vendorVersions.fontAwesome),
  openSans: resolve(vendor, 'open-sans_all', vendorVersions.openSans),
  lato: resolve(vendor, 'lato_latin-ext', vendorVersions.lato)
};

// generates cache-busting templates to be used in `layout.html` without knowing versions
function macroTemplate({htmlWebpackPlugin}){
  const indexHash = htmlWebpackPlugin.files.js[0].split('?')[1];

  return `<!-- these macros are generated by "yarn build". do not edit by hand. -->
{% macro head_pre() %}
  <link rel="stylesheet"
    href="{{ pathto('_static/vendor/fontawesome/${vendorVersions.fontAwesome}/css/all.min.css', 1) }}">
  <link rel="stylesheet"
    href="{{ pathto('_static/vendor/open-sans_all/${vendorVersions.openSans}/index.css', 1) }}">
  <link rel="stylesheet"
    href="{{ pathto('_static/vendor/lato_latin-ext/${vendorVersions.lato}/index.css', 1) }}">
  <link rel="stylesheet"
    href="{{ pathto('_static/css/index.css?${indexHash}', 1) }}">
{% endmacro %}

{% macro head_post() %}
  <link rel="preload" as="script"
    href="{{ pathto('_static/js/index.js?${indexHash}', 1) }}">
{% endmacro %}

{% macro body_post() %}
  <script src="{{ pathto('_static/js/index.js?${indexHash}', 1) }}"></script>
{% endmacro %}`;
}


module.exports = {
  entry: {
    index: ['./src/js/index.js'],
  },
  output: {
    filename: 'js/[name].js?[hash]',
    path: staticPath,
  },
  externals: {
    // Define jQuery as external, this way Sphinx related javascript
    // and custom javascript like popper.js can hook into jQuery.
    jquery: 'jQuery',
  },
  module: {
    rules: [
      {
        test: /\.scss$/,
        use: [
          {
            loader: 'file-loader',
            options: {
              name: 'css/[name].css',
            },
          },
          {
            loader: 'extract-loader',
          },
          {
            loader: 'css-loader?-url',
          },
          {
            loader: 'sass-loader',
          },
        ],
      },
    ],
  },
  plugins: [
    new CleanWebpackPlugin(),
    new HtmlWebpackPlugin({
      filename: resolve(pythonPath, 'webpack-macros.html'),
      inject: false,
      minify: false,
      templateContent: macroTemplate
    }),
    new CopyPlugin([
      // fonts
      {
        context: './node_modules/@fortawesome/fontawesome-free',
        from: 'LICENSE.txt',
        to: resolve(vendorPaths.fontAwesome, 'LICENSE.txt')
      },
      {
        context: './node_modules/@fortawesome/fontawesome-free/css',
        from: 'all.min.css',
        to: resolve(vendorPaths.fontAwesome, 'css')
      },
      {
        context: './node_modules/@fortawesome/fontawesome-free',
        from: 'webfonts',
        to: resolve(vendorPaths.fontAwesome, 'webfonts')
      },
      // opensans
      {
        context: './node_modules/@openfonts/open-sans_all',
        from: 'files/*-400*',
        flatten: true,
        to: resolve(vendorPaths.openSans, 'files')
      },
      {
        context: './node_modules/@openfonts/open-sans_all',
        from: 'LICENSE.md',
        to: resolve(vendorPaths.openSans, 'LICENSE.md')
      },
      {
        context: './node_modules/@openfonts/open-sans_all',
        from: 'index.css',
        to: resolve(vendorPaths.openSans, 'index.css')
      },
      // lato
      {
        context: './node_modules/@openfonts/lato_latin-ext',
        from: 'files/*-400*',
        flatten: true,
        to: resolve(vendorPaths.lato, 'files')
      },
      {
        context: './node_modules/@openfonts/lato_latin-ext',
        from: 'LICENSE.md',
        to: resolve(vendorPaths.lato, 'LICENSE.md')
      },
      {
        context: './node_modules/@openfonts/lato_latin-ext',
        from: 'index.css',
        to: resolve(vendorPaths.lato, 'index.css')
      },
    ]),
    new webpack.ProvidePlugin({
      '$': "jquery",
      'jQuery': "jquery",
      'Popper': 'popper.js'
    }),
  ],
};
